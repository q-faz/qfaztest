#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Corre√ß√£o de caracteres especiais no relat_orgaos.csv
"""

import pandas as pd
import os

def fix_relat_orgaos_encoding():
    """Corrigir encoding do arquivo relat_orgaos.csv"""
    
    file_path = "./backend/relat_orgaos.csv"
    backup_path = "./backend/relat_orgaos_backup.csv"
    
    print("üîß CORRIGINDO ENCODING DO relat_orgaos.csv")
    print("=" * 50)
    
    # Fazer backup
    if os.path.exists(file_path):
        import shutil
        shutil.copy2(file_path, backup_path)
        print(f"‚úÖ Backup criado: {backup_path}")
    
    # Tentar ler com diferentes encodings
    df = None
    original_encoding = None
    
    for encoding in ['latin1', 'cp1252', 'utf-8']:
        try:
            df = pd.read_csv(file_path, encoding=encoding, sep=';')
            original_encoding = encoding
            print(f"‚úÖ Arquivo lido com encoding: {encoding}")
            break
        except Exception as e:
            print(f"‚ùå Falhou com {encoding}: {e}")
            continue
    
    if df is None:
        print("‚ùå N√£o foi poss√≠vel ler o arquivo")
        return
    
    print(f"üìä Arquivo original: {len(df)} linhas, {len(df.columns)} colunas")
    
    # Mostrar caracteres problem√°ticos antes
    print("\nüîç CARACTERES PROBLEM√ÅTICOS ENCONTRADOS:")
    problematic_chars = {}
    
    for col in df.columns:
        if any(char in str(col) for char in ['ÔøΩ', 'ÔøΩ', 'ÔøΩ']):
            print(f"   Coluna: '{col}'")
    
    for idx, row in df.head(10).iterrows():
        for col in df.columns:
            value = str(row[col])
            if any(char in value for char in ['ÔøΩ', 'ÔøΩ', 'ÔøΩ']):
                print(f"   Linha {idx}, Coluna '{col}': '{value}'")
    
    # Mapeamento de corre√ß√µes
    char_fixes = {
        # Caracteres acentuados
        'ORGÔøΩO': '√ìRG√ÉO',
        'OPERAÔøΩÔøΩO': 'OPERA√á√ÉO', 
        'CRÔøΩDITO': 'CR√âDITO',
        'CARTÔøΩO': 'CART√ÉO',
        'BENEFÔøΩCIO': 'BENEF√çCIO',
        'COMPLEMÔøΩNTAR': 'COMPLEMENTAR',
        'EXCLUSÔøΩVE': 'EXCLUSIVE',
        'PRIVÔøΩ': 'PRIV√â',
        'FÔøΩCIL': 'F√ÅCIL',
        'MÔøΩXIM': 'M√ÅXIM',
        'PRÔøΩMIUM': 'PR√âMIUM',
        'CONVENÔøΩÔøΩO': 'CONVEN√á√ÉO',
        'CONTRIBUIÔøΩÔøΩO': 'CONTRIBUI√á√ÉO',
        'SITUAÔøΩÔøΩO': 'SITUA√á√ÉO',
        'INFORMÔøΩÔøΩÔøΩES': 'INFORMA√á√ïES',
        
        # Caracteres especiais comuns
        'ÔøΩ': '√É',
        'ÔøΩ': '√Å', 
        'ÔøΩ': '√Ä',
        'ÔøΩ': '√Ç',
        'ÔøΩ': '√â',
        'ÔøΩ': '√ä',
        'ÔøΩ': '√ç',
        'ÔøΩ': '√ì',
        'ÔøΩ': '√î',
        'ÔøΩ': '√ï',
        'ÔøΩ': '√ö',
        'ÔøΩ': '√á',
    }
    
    # Aplicar corre√ß√µes
    print(f"\nüîß APLICANDO CORRE√á√ïES...")
    corrections_made = 0
    
    # Corrigir nomes das colunas
    new_columns = []
    for col in df.columns:
        new_col = col
        for bad_char, good_char in char_fixes.items():
            if bad_char in new_col:
                new_col = new_col.replace(bad_char, good_char)
                corrections_made += 1
        new_columns.append(new_col)
    
    df.columns = new_columns
    
    # Corrigir dados das c√©lulas
    for col in df.columns:
        if df[col].dtype == 'object':  # Apenas colunas de texto
            for bad_char, good_char in char_fixes.items():
                mask = df[col].str.contains(bad_char, na=False)
                if mask.any():
                    df.loc[mask, col] = df.loc[mask, col].str.replace(bad_char, good_char)
                    corrections_made += mask.sum()
    
    print(f"‚úÖ Corre√ß√µes aplicadas: {corrections_made}")
    
    # Salvar arquivo corrigido
    df.to_csv(file_path, sep=';', index=False, encoding='utf-8')
    print(f"üíæ Arquivo salvo com encoding UTF-8: {file_path}")
    
    # Mostrar resultado
    print(f"\nüìä RESULTADO:")
    print(f"   ‚úÖ Colunas corrigidas: {list(df.columns)}")
    
    return df

if __name__ == "__main__":
    fix_relat_orgaos_encoding()