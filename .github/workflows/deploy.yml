name: üöÄ Deploy Frontend + Backend para Azure Web App

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      # 1Ô∏è‚É£ Checkout do c√≥digo-fonte
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Configurar Node.js (Frontend)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # 3Ô∏è‚É£ Cache do Node para builds mais r√°pidos
      - name: Cache Node Modules
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # 4Ô∏è‚É£ Instalar depend√™ncias e build do frontend
      - name: Build do Frontend
        run: |
          cd frontend
          npm ci --legacy-peer-deps
          npm run build
        shell: bash

      # 5Ô∏è‚É£ Configurar Python (Backend)
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # 6Ô∏è‚É£ Cache do pip
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # 7Ô∏è‚É£ Instalar depend√™ncias do backend
      - name: Instalar depend√™ncias do backend
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install -r backend/requirements.txt

      # 8Ô∏è‚É£ Validar vari√°veis obrigat√≥rias (GitHub Secrets)
      - name: Validar GitHub Secrets
        shell: bash
        env:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
          AZURE_WEBAPP_NAME: ${{ secrets.AZURE_WEBAPP_NAME }}
          AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
          MONGO_URL: ${{ secrets.MONGO_URL }}
          DB_NAME: ${{ secrets.DB_NAME }}
        run: |
          missing=false
          for var in AZURE_CREDENTIALS AZURE_WEBAPP_NAME AZURE_RESOURCE_GROUP MONGO_URL DB_NAME; do
            if [ -z "${!var}" ]; then
              echo "‚ùå ERRO: $var n√£o est√° definido."
              missing=true
            fi
          done
          if [ "$missing" = true ]; then
            exit 1
          fi

      # 9Ô∏è‚É£ Login no Azure
      - name: Login no Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # üîü Configurar vari√°veis de ambiente no Web App
      - name: Configurar vari√°veis de ambiente no Azure Web App
        env:
          AZURE_WEBAPP_NAME: ${{ secrets.AZURE_WEBAPP_NAME }}
          AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
          MONGO_URL: ${{ secrets.MONGO_URL }}
          DB_NAME: ${{ secrets.DB_NAME }}
        run: |
          az webapp config appsettings set \
            --name $AZURE_WEBAPP_NAME \
            --resource-group $AZURE_RESOURCE_GROUP \
            --settings MONGO_URL=$MONGO_URL DB_NAME=$DB_NAME

      # 1Ô∏è‚É£1Ô∏è‚É£ Configurar runtime e startup
      - name: Configurar runtime e startup do backend
        env:
          AZURE_WEBAPP_NAME: ${{ secrets.AZURE_WEBAPP_NAME }}
          AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
        run: |
          az webapp config set \
            --name $AZURE_WEBAPP_NAME \
            --resource-group $AZURE_RESOURCE_GROUP \
            --linux-fx-version "PYTHON|3.11"

          az webapp config appsettings set \
            --name $AZURE_WEBAPP_NAME \
            --resource-group $AZURE_RESOURCE_GROUP \
            --settings PORT=8000

          az webapp config set \
            --name $AZURE_WEBAPP_NAME \
            --resource-group $AZURE_RESOURCE_GROUP \
            --startup-file "python -m uvicorn server:app --host 0.0.0.0 --port \$PORT"

      # 1Ô∏è‚É£2Ô∏è‚É£ Reiniciar o App Service (limpa cache antigo)
      - name: Reiniciar App Service antes do deploy
        run: |
          az webapp restart \
            --name ${{ secrets.AZURE_WEBAPP_NAME }} \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }}

      # 1Ô∏è‚É£3Ô∏è‚É£ Incorporar build do frontend ao backend
      - name: Incorporar build do frontend ao backend
        run: |
          mkdir -p backend/static
          rm -rf backend/static/*
          cp -r frontend/build/* backend/static/

      # 1Ô∏è‚É£4Ô∏è‚É£ Compactar e fazer deploy
      - name: Deploy do backend no Azure
        env:
          AZURE_WEBAPP_NAME: ${{ secrets.AZURE_WEBAPP_NAME }}
          AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
        run: |
          cd backend
          zip -r ../backend_deploy.zip . \
            -x "__pycache__/*" "*.pyc" "Dockerfile" "package.json" "package-lock.json" "node_modules/*"
          cd ..
          az webapp deploy \
            --resource-group $AZURE_RESOURCE_GROUP \
            --name $AZURE_WEBAPP_NAME \
            --src-path backend_deploy.zip \
            --type zip
          echo "‚úÖ Deploy conclu√≠do com sucesso!"

      # 1Ô∏è‚É£5Ô∏è‚É£ Limpeza final
      - name: Limpar arquivos tempor√°rios
        run: rm -f backend_deploy.zip
