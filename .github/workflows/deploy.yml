name: Deploy Frontend + Backend to Azure Web App

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout do reposit√≥rio
      - uses: actions/checkout@v4

      # 2Ô∏è‚É£ Configurar Node.js para frontend
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # 3Ô∏è‚É£ Instalar depend√™ncias do frontend
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci --legacy-peer-deps

      # 4Ô∏è‚É£ Build do frontend
      - name: Build frontend
        run: |
          cd frontend
          npm run build
        shell: bash

      # 5Ô∏è‚É£ Configurar Python para backend
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # 6Ô∏è‚É£ Instalar depend√™ncias do backend
      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install --no-cache-dir -r backend/requirements.txt

      # 7Ô∏è‚É£ Validar secrets obrigat√≥rios
      - name: Validate required GitHub Secrets
        shell: bash
        env:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
          AZURE_WEBAPP_NAME: ${{ secrets.AZURE_WEBAPP_NAME }}
          AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
          MONGO_URL: ${{ secrets.MONGO_URL }}
          DB_NAME: ${{ secrets.DB_NAME }}
        run: |
          missing=false
          for var in AZURE_CREDENTIALS AZURE_WEBAPP_NAME AZURE_RESOURCE_GROUP MONGO_URL DB_NAME; do
            if [ -z "${!var}" ]; then
              echo "ERROR: $var is not set"
              missing=true
            fi
          done
          if [ "$missing" = true ]; then
            echo "One or more required GitHub Secrets are missing."
            exit 1
          fi

      # 8Ô∏è‚É£ Login no Azure
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # 9Ô∏è‚É£ Configurar vari√°veis de ambiente no Web App
      - name: Configure Azure Web App environment variables
        env:
          AZURE_WEBAPP_NAME: ${{ secrets.AZURE_WEBAPP_NAME }}
          AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
          MONGO_URL: ${{ secrets.MONGO_URL }}
          DB_NAME: ${{ secrets.DB_NAME }}
        run: |
          az webapp config appsettings set \
            --name $AZURE_WEBAPP_NAME \
            --resource-group $AZURE_RESOURCE_GROUP \
            --settings MONGO_URL=$MONGO_URL DB_NAME=$DB_NAME

      - name: Ensure startup command and port for App Service
        env:
          AZURE_WEBAPP_NAME: ${{ secrets.AZURE_WEBAPP_NAME }}
          AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
        run: |
          # Set the port and startup command to run uvicorn
          az webapp config appsettings set --name $AZURE_WEBAPP_NAME --resource-group $AZURE_RESOURCE_GROUP --settings WEBSITES_PORT=8000
          az webapp config set --name $AZURE_WEBAPP_NAME --resource-group $AZURE_RESOURCE_GROUP --startup-file "uvicorn server:app --host 0.0.0.0 --port 8000"

      # üîü Limpar arquivos de deploy antigos
      - name: Clean previous deploy zips
        run: rm -f backend_deploy.zip frontend_deploy.zip
      # 1Ô∏è‚É£1Ô∏è‚É£ Copy frontend build into backend static (integrated deploy)
      - name: Copy frontend build into backend static
        run: |
          # ensure backend static dir exists
          mkdir -p backend/static
          rm -rf backend/static/* || true
          cp -r frontend/build/* backend/static/

      # 1Ô∏è‚É£2Ô∏è‚É£ Deploy do backend via ZIP (contendo frontend est√°tico)
      - name: Deploy backend
        env:
          AZURE_WEBAPP_NAME: ${{ secrets.AZURE_WEBAPP_NAME }}
          AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
        run: |
          cd backend
          zip -r ../backend_deploy.zip . -x "__pycache__/*" "*.pyc"
          cd ..
          az webapp deploy --resource-group $AZURE_RESOURCE_GROUP --name $AZURE_WEBAPP_NAME --src-path backend_deploy.zip
          echo "‚úÖ Backend deployed successfully"
      # 1Ô∏è‚É£3Ô∏è‚É£ Limpar arquivos ZIP ap√≥s deploy
      - name: Remove deploy ZIPs
        run: rm -f backend_deploy.zip
