name: Deploy Fullstack Node.js + React to Azure

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout do reposit√≥rio
      - uses: actions/checkout@v4

      # 2Ô∏è‚É£ Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # 3Ô∏è‚É£ Setup Python (opcional, caso use scripts Python no backend)
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # 4Ô∏è‚É£ Instalar backend dependencies
      - name: Install backend dependencies
        run: |
          cd backend
          npm install --legacy-peer-deps

      # 5Ô∏è‚É£ Criar server.js se n√£o existir
      - name: Create server.js if missing
        run: |
          cd backend
          if [ ! -f server.js ]; then
            echo "const express = require('express');
const path = require('path');
const app = express();

// Servir frontend build
app.use(express.static(path.join(__dirname, 'build')));

// Exemplo de rota API
app.get('/api/hello', (req, res) => {
  res.json({ message: 'Ol√° do backend!' });
});

// Rotas React
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, 'build', 'index.html'));
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(\`Server rodando na porta \${PORT}\`));" > server.js
          fi

      # 6Ô∏è‚É£ Instalar frontend dependencies
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install --legacy-peer-deps

      # 7Ô∏è‚É£ Build frontend
      - name: Build frontend
        run: |
          cd frontend
          npm run build

      # 8Ô∏è‚É£ Copiar build do frontend para backend
      - name: Copy frontend build to backend
        run: |
          rm -rf backend/build
          cp -R frontend/build backend/

      # 9Ô∏è‚É£ Validar GitHub Secrets
      - name: Validate required GitHub Secrets
        shell: bash
        env:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
          AZURE_WEBAPP_NAME: ${{ secrets.AZURE_WEBAPP_NAME }}
          AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
        run: |
          missing=false
          for var in AZURE_CREDENTIALS AZURE_WEBAPP_NAME AZURE_RESOURCE_GROUP; do
            if [ -z "${!var}" ]; then
              echo "ERROR: $var is not set"
              missing=true
            fi
          done
          if [ "$missing" = true ]; then exit 1; fi

      # üîü Login no Azure
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # 1Ô∏è‚É£1Ô∏è‚É£ Configurar vari√°veis de ambiente no Web App
      - name: Configure Azure Web App environment variables
        env:
          AZURE_WEBAPP_NAME: ${{ secrets.AZURE_WEBAPP_NAME }}
          AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
        run: |
          az webapp config appsettings set \
            --name $AZURE_WEBAPP_NAME \
            --resource-group $AZURE_RESOURCE_GROUP \
            --settings NODE_ENV=production

      # 1Ô∏è‚É£2Ô∏è‚É£ Deploy backend + frontend
      - name: Deploy backend + frontend
        env:
          AZURE_WEBAPP_NAME: ${{ secrets.AZURE_WEBAPP_NAME }}
          AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
        run: |
          cd backend
          zip -r ../backend_deploy.zip . -x "node_modules/*"
          cd ..
          az webapp deploy --resource-group $AZURE_RESOURCE_GROUP --name $AZURE_WEBAPP_NAME --src-path backend_deploy.zip --type node
